@startuml ModeloConceitual

entity Project {
   + ProjectId : int <<PK>>
   + ProjectTitle : String
   + ProjectDescription : String
   + ProjectBudget : double
   + StartDate : Date
   + EndDate : Date
   + ClientProfileId : int <<FK>>
   + Status : enum ProjectStatus {"PROPOSED", "PLANNING", "ACTIVE", "ON_HOLD", "REVIEW", "COMPLETED", "CANCELLED"}
   + FreelancerId : int <<FK>>
   + IsFixedPrice: boolean
}

entity ProjectCategory {
   + CategoryId : int <<PK>>
   + CategoryName : String
   + CategoryDescription : String [Optional]
}


entity Requirement {
   + RequirementId : int <<PK>>
   + RequirementTitle : String
   + RequirementDescription : String
   + Priority: enum {'Low', 'Medium', 'High'} 
   + ProjectId : int <<FK>>
}

entity Deliverable {
   + DeliverableId : int <<PK>>
   + DeliverableTitle : String
   + RequirementId : int <<FK>>
   + DeliverableType : enum {"Documentation", "Code", "Prototype", "Report"}
   + DeliverableDescription : String
   + ProjectId : int <<FK>>
}

entity Technology {
   + TechnologyId : int <<PK>>
   + TechnologyName : String
   + TechnologyDescription : String
} 

entity FreelancerProfile {
    + FreelancerId : int <<PK>>
    + UserId : int <<FK>>
    + Bio : String
    + ServiceOfferingBlurb : String
    + AvailabilityStatus : enum {"Available", "Partially Available", "Not Available"}
    + ExperienceLevel : enum {"Beginner", "Intermediate", "Expert"} 
    + OverallRating : double
    + IsPremium : boolean
    + HourlyRate : double
    + RateCurrency : String
    + ProfileSummary : String
    + ResumeDocumentUrl : String
}

entity SecuritySpecialization {
    + SpecializationId : int <<PK>> 
    + SpecializationName : String
    + SpecializationDescription : String
    + RelatedSkills : String
}

entity Skill {
    + SkillId : int <<PK>>
    + SkillName : String
    + SkillDescription : String
}

entity Certification {
    + CertificationId : int <<PK>> 
    + CertificationName : String
    + CertificationProvider : String
    + CertificationDate : date
}

entity WorkExperience {
    + ExperienceId : int <<PK>>
    + FreelancerId : int <<FK>>
    + CompanyName : String
    + JobTitle : String
    + StartDate : date
    + EndDate : date
    + JobDescription : String
}

entity WorkSample {
    + WorkSampleId : int <<PK>>
    + FreelancerId : int <<FK>>
    + SampleTitle : String
    + SampleDescription : String
    + SampleUrl : String [URL or file path to the sample work]
}

entity Verification {
    + VerificationId : int <<PK>>
    + FreelancerId : int <<FK>>
    + VerificationDate : Date
    + VerificationStatus : String // e.g., "Verified" or "Not Verified"
    + VerificationNotes : String // Optional notes or comments
}

entity ClientProfile {
    + ClientId : int <<PK>>
    + UserId : int <<FK>>
    + CompanyName : String
    + Industry : String
    + CompanySize : enum {"Small", "Medium", "Large"}
    + ContactPhone : String
}

entity Proposal {
    + ProposalId: int <<PK>>
    + FreelancerId: int <<FK>>
    + ProjectId: int <<FK>>
    + ProposalType: enum {"FixedPrice", "Hourly"}
    + FixedPrice: double [Optional]
    + ProposedHourlyRate: double [Optional]
    + EstimatedHours: int [Optional]
    + EstimatedDuration: date
    + ProposalStatus: enum {"Draft", "Submitted", "Pending", "UnderReview", "Accepted", "Declined", "Negotiation", "Withdrawn", "Expired", "RevisionRequested", "ContractPending"}
    + CoverLetter: String
    + CreatedAt: Date
    + UpdatedAt: Date
}

entity Chat {
    + ChatId : int <<PK>>
    + ChatTitle : String
    + CreatedTimestamp : Date
    + LastMessageTimestamp : Date
    + ProjectId : int <<FK>>
}

entity ChatMessage {
    + MessageId : int <<PK>>
    + MessageText : String
    + SentTimestamp : Date
    + ChatId : int <<FK>>
    + SenderId : int <<FK>>
    + RecipientId : int <<FK>>
}

entity ChatFile {
    + FileId : int <<PK>>
    + FileName : String
    + FileType : String
    + FileContent : Binary
    + UploadedTimestamp : Date
    + MessageId : int <<FK>>
}

entity Notification {
    + NotificationId : int <<PK>>
    + NotificationType : enum {"Project Accpeted, ..."}
    + NotificationMessage : String
    + SenderId : int <<FK>>
    + RecipientId : int <<FK>>
    + SentTimestamp : Date
    + ReadTimestamp : Date [Optional]
}


entity PaymentMethod {
    + PaymentMethodId : int <<PK>>
    + PaymentMethodType : String [e.g., "Credit Card", "PayPal", "Bank Transfer"]
    + PaymentDetails : String [Optional placeholder for future expansion]
}

entity User {
    + userId : int <<PK>>
    + firstName : String
    + lastName : String
    + username : String
    + email : String
    + password : String
    + profileImage : String
    + isAdmin : boolean
    + roles : [Schema.Types.ObjectId] <<FK>>
    --
    .. Timestamps ..
    + createdAt : Date
    + updatedAt : Date
}

entity Role {
    + roleId : int <<PK>>
    + roleName : String
    + roleDescription : String
}

entity Education {
   + EducationId : int <<PK>>
   + FreelancerId : int <<FK>>
   + DegreeName : String
   + FieldOfStudy : String
   + Institution : String
   + GraduationYear : int
}

entity Language {
   + LanguageId : int <<PK>>
   + LanguageName : String
   + ProficiencyLevel : enum {"Beginner", "Intermediate", "Advanced", "Fluent"}
   + IsNative : boolean
}

entity SuccessRate {
    + SuccessRateId : int <<PK>>
    + EntityType : enum {"Client", "Freelancer"}
    + EntityId : int <<FK>> (reference ClientId or FreelancerId based on EntityType)
    + SuccessfulProjects : int
    + TotalProjects : int
    + CalculatedRate : double (derived from SuccessfulProjects / TotalProjects)
}

entity ProjectReview {
    + ReviewId : int <<PK>>
    + ProjectId : int <<FK>>
    + ClientComment : String
    + FreelancerComment : String
    + ReviewDate : date
}

ProjectReview "1" -- "1" Project : review for

' Constraint: A ProjectReview can only be created once per project, after the project is marked as "COMPLETED".
' Constraint: Both ClientComment and FreelancerComment must be provided to create a ProjectReview.

SuccessRate "*" -- "1" FreelancerProfile : success rate for
SuccessRate "*" -- "1" ClientProfile : success rate for


' When ReviewType is "Freelancer-to-Client", the FreelancerId references the freelancer giving the review, and the review is associated with the client's profile.
' Constraint: When ReviewType is "Client-to-Freelancer", the FreelancerId references the freelancer receiving the review, and the review is associated with the freelancer's profile.

FreelancerProfile "1" -- "*" Language : knows

User "1" -- "*" Role : has many
User "1" -- "1" ClientProfile : has one
User "1" -- "1" FreelancerProfile : has one

Requirement "1" -- "*" Deliverable : has many

FreelancerProfile "1" -- "*" PaymentMethod : has many
ClientProfile "1" -- "*" PaymentMethod : has many 

Notification "*" -- "1" FreelancerProfile : sent by
Notification "*" -- "1" ClientProfile : sent to

Project "*" -- "*" ProjectCategory : belongs to
Project "*" -- "*" Chat : has many
Chat "1" -- "*" ChatMessage : has
ChatMessage "1" -- "*" ChatFile : has many
ChatMessage "*" -- "1" FreelancerProfile : sent by
ChatMessage "*" -- "1" ClientProfile : sent by
FreelancerProfile "*" -- "*" Chat : participates in many
ClientProfile "*" -- "*" Chat : participates in many

Proposal "1" -- "1" FreelancerProfile : by
Proposal "1" -- "1" Project : for

ClientProfile "1" -- "*" Project : posts


FreelancerProfile "1" -- "*" Project : works on 
FreelancerProfile "1" -- "1" Verification : has one
FreelancerProfile "1" -- "1" Education : has one
FreelancerProfile "1" -- "1" SecuritySpecialization : has one

FreelancerProfile "1" -- "*" Skill : has many
FreelancerProfile "1" -- "*" Certification : has many
FreelancerProfile "1" -- "*" WorkExperience : has many

Project "1" -- "*" Requirement : has many
Project "*" -- "*" Technology : uses 

FreelancerProfile "1" -- "*" WorkSample : has many

@enduml