@startuml ModeloConceitual

entity Project {
   + ProjectId : int <<PK>>
   + ProjectTitle : String
   + ProjectDescription : String
   + ProjectBudget : double 
   + StartDate : Date
   + EndDate : Date 
   + ClientProfileId : int <<FK>> 
   + StatusId : int <<FK>>
   + FreelancerId : int <<FK>>

}

entity ProjectCategory {
   + CategoryId : int <<PK>>
   + CategoryName : String
   + CategoryDescription : String [Optional]
}

entity ProjectStatus {
   + StatusId : int <<PK>>
   + StatusName : String
   + StatusDescription : String
}

entity Requirement {
   + RequirementId : int <<PK>>
   + RequirementTitle : String
   + RequirementDescription : String
   + PriorityId : int <<FK>> 
   + ProjectId : int <<FK>>
}

entity Deliverable {
   + DeliverableId : int <<PK>>
   + DeliverableTitle : String
   + RequirementId : int <<FK>>
   + DeliverableTypeId : int <<FK>>
   + DeliverableDescription : String
   + ProjectId : int <<FK>>
}

entity DeliverableType {
   + DeliverableTypeId : int <<PK>>
   + TypeName : String [e.g., "Documentation", "Code", "Prototype", "Report"]
   + TypeDescription : String [Optional]
}

entity Technology {
   + TechnologyId : int <<PK>>
   + TechnologyName : String
   + TechnologyDescription : String
} 

entity Priority {
   + PriorityId : int <<PK>>
   + PriorityLevel : String [e.g., "High", "Medium", "Low"]
   + PriorityDescription : String [Optional]
}

entity FreelancerProfile {
    + FreelancerId : int <<PK>>
    + UserId : int <<FK>>
    + ExperienceLevelId : int <<FK>>
    + OverallRating : double
    + IsPremium : boolean
    + HourlyRate : double
    + RateCurrency : String
    + ProfileSummary : String
    + ResumeDocumentUrl : String
}

entity ExperienceLevel {
    + ExperienceLevelId : int <<PK>>
    + ExperienceLevelName : String
}

entity SecuritySpecialization {
    + SpecializationId : int <<PK>> 
    + SpecializationName : String
    + SpecializationDescription : String
    + RelatedSkills : String
}

entity Skill {
    + SkillId : int <<PK>>
    + SkillName : String
    + SkillDescription : String
}

entity Certification {
    + CertificationId : int <<PK>> 
    + CertificationName : String
    + CertificationProvider : String
    + CertificationDate : date
}

entity WorkExperience {
    + ExperienceId : int <<PK>>
    + FreelancerId : int <<FK>>
    + CompanyName : String
    + JobTitle : String
    + StartDate : date
    + EndDate : date
    + JobDescription : String
}

entity Review {
    + ReviewId : int <<PK>>
    + FreelancerId : int <<FK>>
    + ReviewType : String [e.g., "Freelancer-to-Client", "Client-to-Freelancer"]
    + RatingScore : int
    + ReviewComment : String
    + ReviewDate : date
}

entity Portfolio {
    + PortfolioId : int <<PK>>
    + FreelancerId : int <<FK>>
    + ServiceOfferingBlurb : String
    + PortfolioDescription : String
    + PortfolioWebsite : String
    + PortfolioSamples : List<String> // URLs or file paths to sample work
}

entity Verification {
    + VerificationId : int <<PK>>
    + FreelancerId : int <<FK>>
    + VerificationDate : Date
    + VerificationStatus : String // e.g., "Verified" or "Not Verified"
    + VerificationNotes : String // Optional notes or comments
}

entity ClientProfile {
    + ClientId : int <<PK>>
    + UserId : int <<FK>>
    + ClientType : String [e.g., "Software Company", "Startup", "Healthcare Provider"]
    + CompanyName : String
    + Industry : String
    + CompanySize : String [e.g., "Small", "Medium", "Large"]
    + ContactPhone : String
}

entity Proposal {
    + ProposalId: int <<PK>> 
    + FreelancerId: int <<FK>>
    + ProjectId: int <<FK>>
    + ProposedDeliverableId: int <<PK>>
    + ProposedDeliverablesId: [int <<FK>>]
    + ProposalStatusId: int <<FK>>
    + Description: String
    + CreatedAt: Date
    + UpdatedAt: Date
}

entity ProposedDeliverable {
    + ProposedDeliverableId: int <<PK>>
    + ProposalId: int <<FK>>
    + DeliverableId : int <<FK>>
    + ProposedPrice: double
    + ProposedDeliveryTime: date
    + Notes: String
}

entity ProposalStatus {
    + ProposalStatusId: int <<PK>>
    + Name: String
    + Description: String
}

entity Chat {
    + ChatId : int <<PK>>
    + ChatTitle : String
    + CreatedTimestamp : Date
    + LastMessageTimestamp : Date
    + ProjectId : int <<FK>>
}

entity ChatMessage {
    + MessageId : int <<PK>>
    + MessageText : String
    + SentTimestamp : Date
    + ChatId : int <<FK>>
    + SenderId : int <<FK>>
    + RecipientId : int <<FK>>
}

entity ChatFile {
    + FileId : int <<PK>>
    + FileName : String
    + FileType : String
    + FileContent : Binary
    + UploadedTimestamp : Date
    + MessageId : int <<FK>>
}

entity Notification {
    + NotificationId : int <<PK>>
    + NotificationTypeId : int <<FK>>
    + NotificationMessage : String
    + SenderId : int <<FK>>
    + RecipientId : int <<FK>>
    + SentTimestamp : Date
    + ReadTimestamp : Date [Optional]
}

entity NotificationType {
    + NotificationTypeId : int <<PK>>
    + TypeName : String
    + TypeDescription : String [Optional]
}

entity PaymentMethod {
    + PaymentMethodId : int <<PK>>
    + PaymentMethodType : String [e.g., "Credit Card", "PayPal", "Bank Transfer"]
    + PaymentDetails : String [Optional placeholder for future expansion]
}

entity ProgressStatus {
    + ProgressStatusId : int <<PK>>
    + ProgressStatusName : String [e.g., "Not Started", "In Progress", "Completed"]
    + ProgressStatusDescription : String [Optional]
}

' Constraint: Project progress status is derived from its requirements and deliverables
' Constraint: Requirement progress status is derived from its associated deliverables

entity AvailabilityStatus {
    + AvailabilityStatusId : int <<PK>>
    + AvailabilityStatusName : String [e.g., "Available", "Partially Available", "Not Available"]
    + AvailabilityNotes : String [Optional]
}


' Constraint: FreelancerProfile availability status determines visibility in search results and recommendations
' Workflow: Freelancers can update their availability status and notes as needed

entity User {
    + userId : int <<PK>>
    + firstName : String
    + lastName : String
    + username : String
    + email : String
    + password : String
    + profileImage : String
    + isAdmin : boolean
    + roles : [Schema.Types.ObjectId] <<FK>>
    --
    .. Timestamps ..
    + createdAt : Date
    + updatedAt : Date
}

entity Role {
    + roleId : int <<PK>>
    + roleName : String
    + roleDescription : String
}

entity Education {
   + EducationId : int <<PK>>
   + FreelancerId : int <<FK>>
   + DegreeName : String
   + FieldOfStudy : String
   + Institution : String
   + GraduationYear : int
}

entity Language {
   + LanguageId : int <<PK>>
   + LanguageName : String
   + ProficiencyLevel : String [e.g., "Beginner", "Intermediate", "Advanced", "Fluent"]
   + IsNative : boolean
}

User "1" -- "*" Review : has many

Review "*" -- "1" FreelancerProfile : given by/for
Review "*" -- "1" ClientProfile : given by/for 

' When ReviewType is "Freelancer-to-Client", the FreelancerId references the freelancer giving the review, and the review is associated with the client's profile.
' Constraint: When ReviewType is "Client-to-Freelancer", the FreelancerId references the freelancer receiving the review, and the review is associated with the freelancer's profile.

FreelancerProfile "1" -- "*" Language : knows

User "1" -- "*" Role : has many
User "1" -- "1" ClientProfile : has one
User "1" -- "1" FreelancerProfile : has one

Requirement "1" -- "1" ProgressStatus : has one
Deliverable "1" -- "1" ProgressStatus : has one

FreelancerProfile "1" -- "1" AvailabilityStatus : has one

Requirement "*" -- "*" Deliverable : has many

FreelancerProfile "1" -- "*" PaymentMethod : has many
ClientProfile "1" -- "*" PaymentMethod : has many 

Notification "1" -- "*" NotificationType : has one
Notification "*" -- "1" FreelancerProfile : sent by
Notification "*" -- "1" ClientProfile : sent to

Project "*" -- "*" ProjectCategory : belongs to
Project "*" -- "*" Chat : has many
Chat "1" -- "*" ChatMessage : has
ChatMessage "1" -- "*" ChatFile : has many
ChatMessage "*" -- "1" FreelancerProfile : sent by
ChatMessage "*" -- "1" ClientProfile : sent by
FreelancerProfile "*" -- "*" Chat : participates in many
ClientProfile "*" -- "*" Chat : participates in many

Proposal "1" -- "1" FreelancerProfile : by
Proposal "1" -- "1" Project : for
Proposal "1" -- "*" ProposedDeliverable : has many
Proposal "1" -- "1" ProposalStatus : has

ProposedDeliverable "1" -- "1" Deliverable : for

ClientProfile "1" -- "*" Project : posts


FreelancerProfile "1" -- "*" Project : works on 
FreelancerProfile "1" -- "1" Verification : has one
FreelancerProfile "1" -- "1" Education : has one
FreelancerProfile "1" -- "1" Portfolio : has one
FreelancerProfile "1" -- "1" ExperienceLevel : has one
FreelancerProfile "1" -- "1" SecuritySpecialization : has one

FreelancerProfile "1" -- "*" Skill : has many
FreelancerProfile "1" -- "*" Certification : has many
FreelancerProfile "1" -- "*" WorkExperience : has many

Deliverable "1" -- "1" DeliverableType : has one
Deliverable "*" -- "1" Requirement : has many
Requirement "1" -- "1" Priority : has one
Project "1" -- "1" ProjectStatus : has one
Project "1" -- "*" Requirement : has many
Project "*" -- "*" Technology : uses 

@enduml